#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

var nameToAge = new Dictionary<string, int> {
  ["Anne"] = 12,
  ["Bert"] = 23,
  ["Carl"] = 43,
};

nameToAge.Add("Didi", 55);

// Enumerate
foreach (var entry in nameToAge.Values) {
  Console.WriteLine(entry); // Unordered
}

#!csharp

var uniqueIds = new HashSet<int>();
uniqueIds.Add(5);
uniqueIds.Add(1);
uniqueIds.Add(5);

foreach (var id in uniqueIds) {
  Console.WriteLine(id); // 5, 1
}

#!csharp

var x = 5;

switch (x) {
  case 0:
    Console.WriteLine("You win a dollar!");
    break;
  case 5:
    Console.WriteLine("You win a car!");
    break;
  default:
    Console.WriteLine("Play again!");
    break;
}

#!csharp

var x = 99;

switch (x) {
  case <= 100 when x > 98:
    Console.WriteLine("You got an A+!");
    break;
  case <= 98 when x >= 90:
    Console.WriteLine("You got an A!");
    break;
  default:
    Console.WriteLine("You passed!");
    break;
}

#!csharp

var coursework = 95;
var midterm = 91;
var finals = 92;

switch ( (coursework, midterm, finals) ) {
  case (> 80, > 90, > 95):
  case (> 90, > 90, > 90):
    Console.WriteLine("You got an A!");
    break;
  case (> 80, > 80, > 80):
    Console.WriteLine("You got an B!");
    break;
  default:
    Console.WriteLine("You passed!");
    break;
}

#!csharp

var courseGrade = (87, 91, 98) switch {
  ( > 90, > 90, > 95) => "A+",
  ( > 80, > 90, > 90) => "A",
  ( > 80, > 80, > 80) => "B",
  _ => "C"
};

Console.WriteLine(courseGrade);

#!csharp

var account = ("Diamond Member", 100_000);

if (account is ("Diamond Member", >= 100_000)) {
  Console.WriteLine("You are a VIP!");
} else if (account is ("Gold Member", >= 50_000)) {
  Console.WriteLine("You are a Gold Member!");
} else if (account is ("Silver Member", >= 10_000)) {
  Console.WriteLine("You are a Silver Member!");
} else {
  Console.WriteLine("You are a regular member.");
}

#!csharp

var account = new {
  Name = "Gigi",
  Balance = 100_000
};

if (account is { Balance: >= 100_000 }) {
  Console.WriteLine($"{account.Name} is a VIP!");
} else if (account is { Balance: >= 50_000 }) {
  Console.WriteLine($"{account.Name} is a Gold Member!");
} else if (account is { Balance: >= 10_000 }) {
  Console.WriteLine($"{account.Name} is a Silver Member!");
} else {
  Console.WriteLine($"{account.Name} is a regular member.");
}

#!csharp

// Return a function
Action fn() {
  return () => {
    Console.WriteLine("Here");
  };
}

fn()();

#!csharp

// Accept a function
string fn(
  string name,
  Func<string, string> fx
) {
  return fx(name);
}

Console.WriteLine(
  fn("Steve", (name) => $"Hello, {name}")
); // Hello, Steve

#!csharp

var fn = (string msg) => Console.WriteLine(msg);

fn("Hello, World!");

#!csharp

void fn(params string[] args) {
  foreach (var arg in args) {
    Console.Write(arg);
  }
}

fn("a", "b", "c")

#!csharp

void fn(
  string? firstName,
  string? lastName
) {
  Console.WriteLine($"{firstName} {lastName}");
}

fn (lastName: "Lee", firstName: "Amy")

#!csharp

void fn(
  string name = "(no name)"
) {
  Console.WriteLine($"Hello, {name}");
}

fn();
fn("Carl");

#!csharp

using System.Collections.Generic;
using System.Linq;

var fn = (string msg) => Console.WriteLine(msg);

fn("Hello, World!");

var contacts = new List<string> { "Allie", "Stella", "Carson" };
contacts.ForEach(fn);

#!csharp

void fn() {
  void fx() {
    Console.WriteLine("Hello, World!");
  }

  fx();
}

fn();

#!csharp

class Person(
  string firstName,
  string lastName
) {
  public string DisplayName => $"{firstName} {lastName}";

  public void Notify() {
    Console.WriteLine($"Notified {nameof(Person)}: {DisplayName}");
  }
}

var frankie = new Person("Frank", "Sinatra");
frankie.Notify();

#!csharp

class MobileDevice {
  public void Call(int recipient) {
    Console.WriteLine($"Calling: {recipient}");
  }
}

class AndroidPhone : MobileDevice { }

class ApplePhone : MobileDevice { }

var pixel = new AndroidPhone();
pixel.Call(1234567); // "Calling: 1234567"

var iphone = new ApplePhone();
iphone.Call(1234567); // "Calling: 1234567"

#!csharp

interface IMobileDevice {
  void Call(int recipient);
}

class AndroidPhone : IMobileDevice {
  public void Call(int recipient) {
    Console.WriteLine($"Calling {recipient} from my Android device...");
  }
}

class ApplePhone : IMobileDevice {
  public void Call(int recipient) {
    Console.WriteLine($"Calling {recipient} from my Apple device...");
  }
}

var pixel = new AndroidPhone();
pixel.Call(1234567); // "Calling: 1234567"

var iphone = new ApplePhone();
iphone.Call(1234567); // "Calling: 1234567"

#!csharp

abstract class MobileDevice {
  public void Call(int recipient) {
    Console.WriteLine($"Calling: {recipient}");
  }

  public abstract void PowerOn();

  public virtual void ConnectCable() {
    Console.WriteLine("Connecting USB-C...");
  }
}

class AndroidPhone : MobileDevice {
  public override void PowerOn() {
    Console.WriteLine("Powering Android device on...");
  }
}

class ApplePhone(int version) : MobileDevice {
  public override void PowerOn() {
    Console.WriteLine("Powering Apple device on...");
  }

  public override void ConnectCable() {
    if (version < 15) {
      Console.WriteLine("Connecting Lightning cable...");
    } else {
      Console.WriteLine("Connecting USB-C...");
    }
  }
}

var pixel = new AndroidPhone();
pixel.PowerOn(); // "Powering Android device on"
pixel.ConnectCable(); // "Connecting USB-C..."

var iphone = new ApplePhone(14);
iphone.PowerOn(); // "Powering Apple device on"
iphone.ConnectCable(); // "Connecting Lighting cable..."

#!csharp

record Contact(
  string FirstName,
  string LastName
) {
  public string DisplayName => $"{FirstName} {LastName}";
};

var alan = new Contact("Alan", "Turing");
// alan.FirstName = "Alan"; // Error: cannot modify a record
alan = alan with { FirstName = "Al" }; // OK
var (FirstName, LastName) = alan; // Deconstructing a record
Console.WriteLine(alan.DisplayName); // "Al Turing"

var al = new Contact("Al", "Turing");
Console.WriteLine(al == alan);

#!csharp

class MobileDevice { }
class AndroidPhone : MobileDevice { }
class ApplePhone(int version) : MobileDevice {
  public int Version { get; } = version;
}

var pixel = new AndroidPhone();
var iphone16 = new ApplePhone(16);
var iphone14 = new ApplePhone(14);

void CheckDevice(MobileDevice device) {
  var message = device switch {
    AndroidPhone => "This is an Android phone",
    ApplePhone and { Version: >= 15} => "This is an Apple phone with USB-C",
    ApplePhone => "This is an Apple phone with Lightning",
    _ => "Mobile device"
  };

  Console.WriteLine(message);
}

CheckDevice(pixel); // "This is an Android phone"
CheckDevice(iphone16); // "This is an Apple phone with USB-C"
CheckDevice(iphone14); // "This is an Apple phone with Lightning"
